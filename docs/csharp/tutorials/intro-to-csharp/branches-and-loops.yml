### YamlMime:Tutorial
title: Изучение условной логики с операторами ветви и цикла
metadata:
  title: Ветви и циклы. Интерактивное вводное руководство по C#
  description: В этом руководстве о ветвях и циклах для интерактивного изучения языка C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Коллекция списка
  ms.openlocfilehash: ab709b6b30b5a173e2faf08b577e4d7a3d9a9034
  ms.sourcegitcommit: 7588136e355e10cbc2582f389c90c127363c02a5
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 03/14/2020
  ms.locfileid: "73969429"
items:
- durationInMinutes: 1
  content: >
    В этом руководстве объясняется, как написать код, который позволяет проверить переменные и изменить путь выполнения на основе этих переменных. Вы напишете код C# в интерактивном режиме и сможете просмотреть результаты его компиляции и выполнения с помощью браузера. Это руководство содержит ряд уроков, в которых рассматриваются конструкции ветвления и циклов в C#. В рамках этих занятий вы ознакомитесь с основами языка C#.
- title: Принятие решений с помощью оператора if
  durationInMinutes: 4
  content: >
    Запустите приведенный ниже код в интерактивном окне. Нажмите кнопку **Перейти в режим фокусировки**. Затем введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Если выполнение происходит в вашей среде, следуйте инструкциям для [локальной версии](branches-and-loops-local.md).


    Измените объявление `b`, чтобы сумма была меньше 10:


    ```csharp

    int b = 3;

    ```


    Нажмите кнопку **Выполнить** еще раз. Так как ответ меньше 10, никакие данные не выводятся. Проверяемое **условие** имеет значение false. У вас еще нет кода для выполнения, так как вы написали только одну из возможных ветвей для оператора `if` — ветвь true.


    > [!TIP]

    > Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде. **Компилятор** найдет эти ошибки и сообщит вам о них. Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.

    > Это упражнение поможет вам изучить структуру кода C#.


    В первом примере показаны возможности `if` и логические типы. *Логическое значение* — это переменная, которая может иметь одно из двух значений: `true` или `false`. Логические переменные в C# определяются особым типом — `bool`. Оператор `if` проверяет значение `bool`. Если значение `true`, выполняется оператор, следующий после `if`. В противном случае он пропускается.


    Этот процесс проверки условий и выполнения операторов на основе этих условий предоставляет широкие возможности. Давайте рассмотрим его подробнее.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Объединение операторов if и else
  durationInMinutes: 10
  content: "\nЧтобы выполнить разный код в ветвях true и false, создайте ветвь `else`, которая будет выполняться, если условие имеет значение false. Попробуйте выполнить следующий код:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nОператор после ключевого слова `else` выполняется, только если проверяемое условие имеет значение `false`. Объединив операторы `if` и `else` с логическими условиями, вы получите все необходимые возможности.\n\n> [!IMPORTANT]\n> Отступы под операторами `if` и `else` предназначены только для удобства чтения.\n> В языке C# необязательно ставить отступы или пробелы.\n> Операторы после ключевого слова `if` или `else` будут выполняться на основе условия. Во всех строках в примерах кода, представленных в этом руководстве, отступы традиционно соответствуют потоку управления операторов.\n\nТак как отступ не обязателен, используйте скобки `{` и `}`, если нужно указать несколько операторов в блоке кода, который выполняется в зависимости от условий. Программисты C# обычно используют эти фигурные скобки во всех предложениях `if` и `else`. Следующий пример аналогичен только что созданному. Выполните его.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Все примеры кода в следующих разделах руководства содержат фигурные скобки в соответствии с принятой практикой.\n\nМожно проверить более сложные условия:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nСимвол `==` позволяет проверить *равенство*. С помощью `==` обозначается отличие проверки равенства от назначения, которое показано в `a = 5`.\n\n`&&` представляет оператор and. То есть для выполнения оператора в ветви true оба условия должны иметь значение true.  В этих примерах также показано, что в каждой условной ветви можно задать несколько операторов. Нужно лишь заключить их в скобки `{` и `}`.\n\nВы также можете использовать оператор `||`, который представляет оператор or.\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nИзмените значения `a`, `b` и `c`, а также переключитесь между `&&` и `||` для изучения. Так вы лучше поймете, как работают операторы `&&` и `||`.\n\n> [!NOTE]\n> Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Использование циклов для повторения операций
  durationInMinutes: 6
  content: >
    Еще одной важной конструкцией для создания больших программ являются **циклы**. Циклы используется для повторения операторов, которые должны выполняться несколько раз. Выполните следующий код в интерактивном окне:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    Оператор `while` проверяет условие и выполняет инструкцию, следующую после `while`. Проверка условия и выполнение этих операторов будут повторяться, пока условие не примет значение false.


    В этом примере представлен еще один новый оператор. Объект `++` после переменной `counter` представляет собой оператор **инкремента**. Он добавляет 1 к значению счетчика и сохраняет это значение в переменной счетчика.


    > [!IMPORTANT]

    > Напишите такой код, при выполнении которого значение условия цикла `while` изменится на false. В противном случае будет создан **бесконечный цикл**, в котором выполнение программы никогда не закончится. Мы не будем приводить пример, так как истечет время ожидания подсистемы, в которой выполняется код, и вы не увидите выходных данных из программы.


    В цикле `while` условие проверяется, прежде чем выполнить код, который следует после `while`. А в цикле `do` ... `while` сначала выполняется код, а потом проверяется условие. Это выглядит следующим образом:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Этот цикл `do` и цикл `while`, приведенный выше, выполняются одинаково.


    Давайте перейдем к одному из последних операторов цикла.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Работа с циклом for
  durationInMinutes: 5
  content: >
    Еще один стандартный оператор цикла, который можно увидеть в C#, — это цикл `for`. Выполните следующий код в интерактивном окне:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Этот цикл работает так же, как циклы `while` и `do`, использованные ранее. Оператор `for` состоит из трех частей, которые отвечают за его работу.


    Первая часть — **для инициализатора**: `int counter = 0;` объявляет `counter` переменной цикла и задает для ее начальное значение `0`.


    Средняя часть — **для условия**: `counter < 10` объявляет, что этот цикл `for` продолжает выполняться, пока значение счетчика меньше 10.


    Последняя часть — **для итератора**: `counter++` определяет, как изменится переменная цикла после выполнения блока, следующего после оператора `for`. В нашем случае определяется, что значение `counter` должно увеличиваться на 1 каждый раз, когда выполняется блок.


    Попробуйте сделать это самостоятельно. Попытайтесь выполнить следующие задания:


    - Измените инициализатор, чтобы цикл начинался с другого значения.

    - Измените условие, чтобы цикл заканчивался другим значением.


    По окончании попробуйте самостоятельно написать код, чтобы применить полученные знания.


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Объединение ветвей и циклов
  durationInMinutes: 12
  content: >
    Теперь, когда вы ознакомились с оператором `if` и конструкциями цикла на языке C#, попытайтесь написать код C# для поиска суммы всех целых чисел от 1 до 20, которые делятся на 3.  Вот несколько подсказок:


    - оператор `%` позволяет получить остаток от операции деления;

    - оператор `if` предоставляет условие, которое позволяет определить, будет ли число учитываться в сумме;

    - цикл `for` позволяет повторить последовательность шагов для всех чисел от 1 до 20.


    Попробуйте самостоятельно. Затем проверьте результат. Вы должны получить ответ "63".


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Выполнение задачи
  durationInMinutes: 1
  content: >
    В результате получилось нечто подобное?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии. При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).
- title: Поздравляем!
  content: >-
    Вы ознакомились с интерактивный руководством по ветвям и циклам. Можно щелкнуть ссылку **Коллекция списков** ниже для запуска интерактивного учебника либо посетить [сайт .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) для скачивания пакета SDK для .NET Core, создать проект на своем компьютере и продолжить работу над ним. В разделе "Дальнейшие действия" вы вернетесь к этим учебникам.


    Дополнительные сведения об этих понятиях см. в следующих разделах:


    - [if-else (справочник по C#)](../../language-reference/keywords/if-else.md)

    - [while (справочник по C#)](../../language-reference/keywords/while.md)

    - [do (справочник по C#)](../../language-reference/keywords/do.md)

    - [for (справочник по C#)](../../language-reference/keywords/for.md)
