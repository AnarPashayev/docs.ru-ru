### YamlMime:Tutorial
title: <span data-ttu-id="86e59-101">Изучение условной логики с операторами ветви и цикла</span><span class="sxs-lookup"><span data-stu-id="86e59-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Ветви и циклы. Интерактивное вводное руководство по C#
  description: В этом руководстве о ветвях и циклах для интерактивного изучения языка C# используется браузер. Вы напишете код C# и сможете просмотреть результаты его компиляции и выполнения непосредственно в браузере.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="86e59-105">Коллекция списка</span><span class="sxs-lookup"><span data-stu-id="86e59-105">The list collection</span></span>
  ms.openlocfilehash: aa6e91af175d1d3a3dcad7086c3a8205d45f438a
  ms.sourcegitcommit: ca2ca60e6f5ea327f164be7ce26d9599e0f85fe4
  ms.translationtype: HT
  ms.contentlocale: ru-RU
  ms.lasthandoff: 05/06/2019
  ms.locfileid: "65063849"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="86e59-106">В этом руководстве объясняется, как написать код, который позволяет проверить переменные и изменить путь выполнения на основе этих переменных.</span><span class="sxs-lookup"><span data-stu-id="86e59-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="86e59-107">Вы напишете код C# в интерактивном режиме и сможете просмотреть результаты его компиляции и выполнения с помощью браузера.</span><span class="sxs-lookup"><span data-stu-id="86e59-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="86e59-108">Это руководство содержит ряд уроков, в которых рассматриваются конструкции ветвления и циклов в C#.</span><span class="sxs-lookup"><span data-stu-id="86e59-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="86e59-109">В рамках этих занятий вы ознакомитесь с основами языка C#.</span><span class="sxs-lookup"><span data-stu-id="86e59-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="86e59-110">Принятие решений с помощью оператора if</span><span class="sxs-lookup"><span data-stu-id="86e59-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="86e59-111">Запустите приведенный ниже код в интерактивном окне.</span><span class="sxs-lookup"><span data-stu-id="86e59-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="86e59-112">Для этого введите следующий блок кода в интерактивном окне и нажмите кнопку **Выполнить**:</span><span class="sxs-lookup"><span data-stu-id="86e59-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="86e59-113">Измените объявление `b`, чтобы сумма была меньше 10:</span><span class="sxs-lookup"><span data-stu-id="86e59-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="86e59-114">Нажмите кнопку **Выполнить** еще раз.</span><span class="sxs-lookup"><span data-stu-id="86e59-114">Click the **Run** button again.</span></span> <span data-ttu-id="86e59-115">Так как ответ меньше 10, никакие данные не выводятся.</span><span class="sxs-lookup"><span data-stu-id="86e59-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="86e59-116">Проверяемое **условие** имеет значение false.</span><span class="sxs-lookup"><span data-stu-id="86e59-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="86e59-117">У вас еще нет кода для выполнения, так как вы написали только одну из возможных ветвей для оператора `if` — ветвь true.</span><span class="sxs-lookup"><span data-stu-id="86e59-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="86e59-118">Вероятнее всего, при изучении C# (как и любого другого языка программирования) вы будете допускать ошибки в коде.</span><span class="sxs-lookup"><span data-stu-id="86e59-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="86e59-119">**Компилятор** найдет эти ошибки и сообщит вам о них.</span><span class="sxs-lookup"><span data-stu-id="86e59-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="86e59-120">Если результат содержит сообщения об ошибках, внимательно просмотрите пример кода и код в интерактивном окне, чтобы понять, что нужно исправить.</span><span class="sxs-lookup"><span data-stu-id="86e59-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="86e59-121">Это упражнение поможет вам изучить структуру кода C#.</span><span class="sxs-lookup"><span data-stu-id="86e59-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="86e59-122">В первом примере показаны возможности `if` и логические типы.</span><span class="sxs-lookup"><span data-stu-id="86e59-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="86e59-123">*Логическое значение* — это переменная, которая может иметь одно из двух значений: `true` или `false`.</span><span class="sxs-lookup"><span data-stu-id="86e59-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="86e59-124">Логические переменные в C# определяются особым типом — `bool`.</span><span class="sxs-lookup"><span data-stu-id="86e59-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="86e59-125">Оператор `if` проверяет значение `bool`.</span><span class="sxs-lookup"><span data-stu-id="86e59-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="86e59-126">Если значение `true`, выполняется оператор, следующий после `if`.</span><span class="sxs-lookup"><span data-stu-id="86e59-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="86e59-127">В противном случае он пропускается.</span><span class="sxs-lookup"><span data-stu-id="86e59-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="86e59-128">Этот процесс проверки условий и выполнения операторов на основе этих условий предоставляет широкие возможности.</span><span class="sxs-lookup"><span data-stu-id="86e59-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="86e59-129">Давайте рассмотрим его подробнее.</span><span class="sxs-lookup"><span data-stu-id="86e59-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="86e59-130">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="86e59-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="86e59-131">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="86e59-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="86e59-132">Объединение операторов if и else</span><span class="sxs-lookup"><span data-stu-id="86e59-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"86e59-133\">Чтобы выполнить разный код в ветвях true и false, создайте ветвь `else`, которая будет выполняться, если условие имеет значение false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"86e59-134\">Попробуйте выполнить следующий код:</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"86e59-135\">Оператор после ключевого слова `else` выполняется, только если проверяемое условие имеет значение `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"86e59-136\">Объединив операторы `if` и `else` с логическими условиями, вы получите все необходимые возможности.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"86e59-137\">Отступы под операторами `if` и `else` предназначены только для удобства чтения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"86e59-138\">В языке C# необязательно ставить отступы или пробелы.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"86e59-139\">Операторы после ключевого слова `if` или `else` будут выполняться на основе условия.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"86e59-140\">Во всех строках в примерах кода, представленных в этом руководстве, отступы традиционно соответствуют потоку управления операторов.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"86e59-141\">Так как отступ не обязателен, используйте скобки `{` и `}`, если нужно указать несколько операторов в блоке кода, который выполняется в зависимости от условий.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"86e59-142\">Программисты C# обычно используют эти фигурные скобки во всех предложениях `if` и `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"86e59-143\">Следующий пример аналогичен только что созданному.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"86e59-144\">Выполните его.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"86e59-145\">Все примеры кода в следующих разделах руководства содержат фигурные скобки в соответствии с принятой практикой.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"86e59-146\">Можно проверить более сложные условия:</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"86e59-147\">Символ `==` позволяет проверить *равенство*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"86e59-148\">С помощью `==` обозначается отличие проверки равенства от назначения, которое показано в `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"86e59-149\">`&&` представляет оператор and.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"86e59-150\">То есть для выполнения оператора в ветви true оба условия должны иметь значение true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"86e59-151\">В этих примерах также показано, что в каждой условной ветви можно задать несколько операторов. Нужно лишь заключить их в скобки `{` и `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"86e59-152\">Вы также можете использовать оператор `||`, который представляет оператор or.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"86e59-153\">Измените значения `a`, `b` и `c`, а также переключитесь между `&&` и `||` для изучения.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"86e59-154\">Так вы лучше поймете, как работают операторы `&&` и `||`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"86e59-155\">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"86e59-156\">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"86e59-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="86e59-157">Использование циклов для повторения операций</span><span class="sxs-lookup"><span data-stu-id="86e59-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="86e59-158">Еще одной важной конструкцией для создания больших программ являются **циклы**.</span><span class="sxs-lookup"><span data-stu-id="86e59-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="86e59-159">Циклы используется для повторения операторов, которые должны выполняться несколько раз.</span><span class="sxs-lookup"><span data-stu-id="86e59-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="86e59-160">Выполните следующий код в интерактивном окне:</span><span class="sxs-lookup"><span data-stu-id="86e59-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="86e59-161">Оператор `while` проверяет условие и выполняет инструкцию, следующую после `while`.</span><span class="sxs-lookup"><span data-stu-id="86e59-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="86e59-162">Проверка условия и выполнение этих операторов будут повторяться, пока условие не примет значение false.</span><span class="sxs-lookup"><span data-stu-id="86e59-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="86e59-163">В этом примере представлен еще один новый оператор.</span><span class="sxs-lookup"><span data-stu-id="86e59-163">There's one other new operator in this example.</span></span> <span data-ttu-id="86e59-164">Объект `++` после переменной `counter` представляет собой оператор **инкремента**.</span><span class="sxs-lookup"><span data-stu-id="86e59-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="86e59-165">Он добавляет 1 к значению счетчика и сохраняет это значение в переменной счетчика.</span><span class="sxs-lookup"><span data-stu-id="86e59-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="86e59-166">Напишите такой код, при выполнении которого значение условия цикла `while` изменится на false.</span><span class="sxs-lookup"><span data-stu-id="86e59-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="86e59-167">В противном случае будет создан **бесконечный цикл**, в котором выполнение программы никогда не закончится.</span><span class="sxs-lookup"><span data-stu-id="86e59-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="86e59-168">Мы не будем приводить пример, так как истечет время ожидания подсистемы, в которой выполняется код, и вы не увидите выходных данных из программы.</span><span class="sxs-lookup"><span data-stu-id="86e59-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="86e59-169">В цикле `while` условие проверяется, прежде чем выполнить код, который следует после `while`.</span><span class="sxs-lookup"><span data-stu-id="86e59-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="86e59-170">А в цикле `do` ... `while` сначала выполняется код, а потом проверяется условие.</span><span class="sxs-lookup"><span data-stu-id="86e59-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="86e59-171">Это выглядит следующим образом:</span><span class="sxs-lookup"><span data-stu-id="86e59-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="86e59-172">Этот цикл `do` и цикл `while`, приведенный выше, выполняются одинаково.</span><span class="sxs-lookup"><span data-stu-id="86e59-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="86e59-173">Давайте перейдем к одному из последних операторов цикла.</span><span class="sxs-lookup"><span data-stu-id="86e59-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="86e59-174">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="86e59-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="86e59-175">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="86e59-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="86e59-176">Работа с циклом for</span><span class="sxs-lookup"><span data-stu-id="86e59-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="86e59-177">Еще один стандартный оператор цикла, который можно увидеть в C#, — это цикл `for`.</span><span class="sxs-lookup"><span data-stu-id="86e59-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="86e59-178">Выполните следующий код в интерактивном окне:</span><span class="sxs-lookup"><span data-stu-id="86e59-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="86e59-179">Этот цикл работает так же, как циклы `while` и `do`, использованные ранее.</span><span class="sxs-lookup"><span data-stu-id="86e59-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="86e59-180">Оператор `for` состоит из трех частей, которые отвечают за его работу.</span><span class="sxs-lookup"><span data-stu-id="86e59-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="86e59-181">Первая часть — **для инициализатора**: `int counter = 0;` объявляет `counter` переменной цикла и задает для ее начальное значение `0`.</span><span class="sxs-lookup"><span data-stu-id="86e59-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="86e59-182">Средняя часть — **для условия**: `counter < 10` объявляет, что этот цикл `for` продолжает выполняться, пока значение счетчика меньше 10.</span><span class="sxs-lookup"><span data-stu-id="86e59-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="86e59-183">Последняя часть — **для итератора**: `counter++` определяет, как изменится переменная цикла после выполнения блока, следующего после оператора `for`.</span><span class="sxs-lookup"><span data-stu-id="86e59-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="86e59-184">В нашем случае определяется, что значение `counter` должно увеличиваться на 1 каждый раз, когда выполняется блок.</span><span class="sxs-lookup"><span data-stu-id="86e59-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="86e59-185">Попробуйте сделать это самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="86e59-185">Experiment with these yourself.</span></span> <span data-ttu-id="86e59-186">Попытайтесь выполнить следующие задания:</span><span class="sxs-lookup"><span data-stu-id="86e59-186">Try each of the following:</span></span>


    - <span data-ttu-id="86e59-187">Измените инициализатор, чтобы цикл начинался с другого значения.</span><span class="sxs-lookup"><span data-stu-id="86e59-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="86e59-188">Измените условие, чтобы цикл заканчивался другим значением.</span><span class="sxs-lookup"><span data-stu-id="86e59-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="86e59-189">По окончании попробуйте самостоятельно написать код, чтобы применить полученные знания.</span><span class="sxs-lookup"><span data-stu-id="86e59-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="86e59-190">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="86e59-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="86e59-191">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="86e59-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="86e59-192">Объединение ветвей и циклов</span><span class="sxs-lookup"><span data-stu-id="86e59-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="86e59-193">Теперь, когда вы ознакомились с оператором `if` и конструкциями цикла на языке C#, попытайтесь написать код C# для поиска суммы всех целых чисел от 1 до 20, которые делятся на 3.</span><span class="sxs-lookup"><span data-stu-id="86e59-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="86e59-194">Вот несколько подсказок:</span><span class="sxs-lookup"><span data-stu-id="86e59-194">Here are a few hints:</span></span>


    - <span data-ttu-id="86e59-195">оператор `%` позволяет получить остаток от операции деления;</span><span class="sxs-lookup"><span data-stu-id="86e59-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="86e59-196">оператор `if` предоставляет условие, которое позволяет определить, будет ли число учитываться в сумме;</span><span class="sxs-lookup"><span data-stu-id="86e59-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="86e59-197">цикл `for` позволяет повторить последовательность шагов для всех чисел от 1 до 20.</span><span class="sxs-lookup"><span data-stu-id="86e59-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="86e59-198">Попробуйте самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="86e59-198">Try it yourself.</span></span> <span data-ttu-id="86e59-199">Затем проверьте результат.</span><span class="sxs-lookup"><span data-stu-id="86e59-199">Then check how you did.</span></span> <span data-ttu-id="86e59-200">Вы должны получить ответ "63".</span><span class="sxs-lookup"><span data-stu-id="86e59-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="86e59-201">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="86e59-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="86e59-202">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="86e59-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="86e59-203">Выполнение задачи</span><span class="sxs-lookup"><span data-stu-id="86e59-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="86e59-204">В результате получилось нечто подобное?</span><span class="sxs-lookup"><span data-stu-id="86e59-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="86e59-205">Этот онлайн-интерфейс для написания кода находится на этапе предварительной версии.</span><span class="sxs-lookup"><span data-stu-id="86e59-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="86e59-206">При возникновении проблем сообщите о них на странице [репозитория dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="86e59-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="86e59-207">Поздравляем!</span><span class="sxs-lookup"><span data-stu-id="86e59-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="86e59-208">Вы ознакомились с интерактивный руководством по ветвям и циклам.</span><span class="sxs-lookup"><span data-stu-id="86e59-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="86e59-209">Можно щелкнуть ссылку **Коллекция списков** ниже для запуска интерактивного учебника либо посетить [сайт .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) для скачивания пакета SDK для .NET Core, создать проект на своем компьютере и продолжить работу над ним.</span><span class="sxs-lookup"><span data-stu-id="86e59-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="86e59-210">На шаге "Продолжение обучения" вы вернетесь к этим учебникам.</span><span class="sxs-lookup"><span data-stu-id="86e59-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="86e59-211">Дополнительные сведения об этих понятиях см. в следующих разделах:</span><span class="sxs-lookup"><span data-stu-id="86e59-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="86e59-212">if-else (справочник по C#)</span><span class="sxs-lookup"><span data-stu-id="86e59-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="86e59-213">while (справочник по C#)</span><span class="sxs-lookup"><span data-stu-id="86e59-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="86e59-214">do (справочник по C#)</span><span class="sxs-lookup"><span data-stu-id="86e59-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="86e59-215">for (справочник по C#)</span><span class="sxs-lookup"><span data-stu-id="86e59-215">For statement</span></span>](../../language-reference/keywords/for.md)
